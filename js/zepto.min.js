'use strict';
!function(item, registerAsLoaded) {
  if ("function" == typeof define && define.amd) {
    define(function() {
      return registerAsLoaded(item);
    });
  } else {
    registerAsLoaded(item);
  }
}(this, function(window) {
  var Zepto = function() {
    /**
     * @param {!Object} obj
     * @return {?}
     */
    function type(obj) {
      return null == obj ? String(obj) : class2type[toString.call(obj)] || "object";
    }
    /**
     * @param {!Object} fn
     * @return {?}
     */
    function isFunction(fn) {
      return "function" == type(fn);
    }
    /**
     * @param {!Object} obj
     * @return {?}
     */
    function isWindow(obj) {
      return null != obj && obj == obj.window;
    }
    /**
     * @param {!Object} obj
     * @return {?}
     */
    function isDocument(obj) {
      return null != obj && obj.nodeType == obj.DOCUMENT_NODE;
    }
    /**
     * @param {!Object} obj
     * @return {?}
     */
    function isObject(obj) {
      return "object" == type(obj);
    }
    /**
     * @param {!Object} obj
     * @return {?}
     */
    function isPlainObject(obj) {
      return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;
    }
    /**
     * @param {!Object} obj
     * @return {?}
     */
    function likeArray(obj) {
      var length = !!obj && "length" in obj && obj.length;
      var type = $.type(obj);
      return "function" != type && !isWindow(obj) && ("array" == type || 0 === length || "number" == typeof length && length > 0 && length - 1 in obj);
    }
    /**
     * @param {string} array
     * @return {?}
     */
    function compact(array) {
      return filter.call(array, function(canCreateDiscussions) {
        return null != canCreateDiscussions;
      });
    }
    /**
     * @param {?} inData
     * @return {?}
     */
    function update(inData) {
      return inData.length > 0 ? $.fn.concat.apply([], inData) : inData;
    }
    /**
     * @param {!Object} str
     * @return {?}
     */
    function dasherize(str) {
      return str.replace(/::/g, "/").replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").replace(/_/g, "-").toLowerCase();
    }
    /**
     * @param {string} name
     * @return {?}
     */
    function classRE(name) {
      return name in classCache ? classCache[name] : classCache[name] = new RegExp("(^|\\s)" + name + "(\\s|$)");
    }
    /**
     * @param {!Object} name
     * @param {string} value
     * @return {?}
     */
    function maybeAddPx(name, value) {
      return "number" != typeof value || cssNumber[dasherize(name)] ? value : value + "px";
    }
    /**
     * @param {?} nodeName
     * @return {?}
     */
    function defaultDisplay(nodeName) {
      var node;
      var display;
      return elementDisplay[nodeName] || (node = document.createElement(nodeName), document.body.appendChild(node), display = getComputedStyle(node, "").getPropertyValue("display"), node.parentNode.removeChild(node), "none" == display && (display = "block"), elementDisplay[nodeName] = display), elementDisplay[nodeName];
    }
    /**
     * @param {!Object} element
     * @return {?}
     */
    function children(element) {
      return "children" in element ? slice.call(element.children) : $.map(element.childNodes, function(nodeToInspect) {
        return 1 == nodeToInspect.nodeType ? nodeToInspect : void 0;
      });
    }
    /**
     * @param {!Array} dom
     * @param {string} selector
     * @return {undefined}
     */
    function Z(dom, selector) {
      var i;
      var len = dom ? dom.length : 0;
      /** @type {number} */
      i = 0;
      for (; len > i; i++) {
        this[i] = dom[i];
      }
      this.length = len;
      this.selector = selector || "";
    }
    /**
     * @param {!Object} obj
     * @param {!Object} args
     * @param {string} i
     * @return {undefined}
     */
    function create(obj, args, i) {
      for (key in args) {
        if (i && (isPlainObject(args[key]) || isArray(args[key]))) {
          if (isPlainObject(args[key]) && !isPlainObject(obj[key])) {
            obj[key] = {};
          }
          if (isArray(args[key]) && !isArray(obj[key])) {
            /** @type {!Array} */
            obj[key] = [];
          }
          create(obj[key], args[key], i);
        } else {
          if (args[key] !== undefined) {
            obj[key] = args[key];
          }
        }
      }
    }
    /**
     * @param {!Array} obj
     * @param {string} string
     * @return {?}
     */
    function filtered(obj, string) {
      return null == string ? $(obj) : $(obj).filter(string);
    }
    /**
     * @param {?} context
     * @param {!Object} arg
     * @param {?} idx
     * @param {!Array} payload
     * @return {?}
     */
    function funcArg(context, arg, idx, payload) {
      return isFunction(arg) ? arg.call(context, idx, payload) : arg;
    }
    /**
     * @param {!Element} p
     * @param {!Object} n
     * @param {string} node
     * @return {undefined}
     */
    function setAttribute(p, n, node) {
      if (null == node) {
        p.removeAttribute(n);
      } else {
        p.setAttribute(n, node);
      }
    }
    /**
     * @param {!Object} element
     * @param {string} value
     * @return {?}
     */
    function className(element, value) {
      var klass = element.className || "";
      var svg = klass && klass.baseVal !== undefined;
      return value === undefined ? svg ? klass.baseVal : klass : void(svg ? klass.baseVal = value : element.className = value);
    }
    /**
     * @param {string} value
     * @return {?}
     */
    function deserializeValue(value) {
      try {
        return value ? "true" == value || ("false" == value ? false : "null" == value ? null : +value + "" == value ? +value : /^[\[\{]/.test(value) ? $.parseJSON(value) : value) : value;
      } catch (e) {
        return value;
      }
    }
    /**
     * @param {!Object} el
     * @param {!Function} parent
     * @return {undefined}
     */
    function success(el, parent) {
      parent(el);
      /** @type {number} */
      var i = 0;
      var countRep = el.childNodes.length;
      for (; countRep > i; i++) {
        success(el.childNodes[i], parent);
      }
    }
    var undefined;
    var key;
    var $;
    var classList;
    var camelize;
    var uniq;
    /** @type {!Array} */
    var emptyArray = [];
    /** @type {function(this:*, ...*): !Array<?>} */
    var concat = emptyArray.concat;
    /** @type {function(this:(IArrayLike<T>|string), (function(this:S, T, number, !Array<T>): ?|null), S=): !Array<T>} */
    var filter = emptyArray.filter;
    /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
    var slice = emptyArray.slice;
    var document = window.document;
    var elementDisplay = {};
    var classCache = {};
    var cssNumber = {
      "column-count" : 1,
      columns : 1,
      "font-weight" : 1,
      "line-height" : 1,
      opacity : 1,
      "z-index" : 1,
      zoom : 1
    };
    /** @type {!RegExp} */
    var p = /^\s*<(\w+|!)[^>]*>/;
    /** @type {!RegExp} */
    var regexInvalidEntity = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
    /** @type {!RegExp} */
    var REGEXP_ATTR_TAG = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;
    /** @type {!RegExp} */
    var invalidParent = /^(?:body|html)$/i;
    /** @type {!RegExp} */
    var dashExpr = /([A-Z])/g;
    /** @type {!Array} */
    var methodAttributes = ["val", "css", "html", "text", "data", "width", "height", "offset"];
    /** @type {!Array} */
    var adjacencyOperators = ["after", "prepend", "before", "append"];
    var table = document.createElement("table");
    var tableRow = document.createElement("tr");
    var containers = {
      tr : document.createElement("tbody"),
      tbody : table,
      thead : table,
      tfoot : table,
      td : tableRow,
      th : tableRow,
      "*" : document.createElement("div")
    };
    /** @type {!RegExp} */
    var readyRE = /complete|loaded|interactive/;
    /** @type {!RegExp} */
    var simpleSelectorRE = /^[\w-]*$/;
    var class2type = {};
    /** @type {function(this:*): string} */
    var toString = class2type.toString;
    var zepto = {};
    var tempParent = document.createElement("div");
    var propMap = {
      tabindex : "tabIndex",
      readonly : "readOnly",
      "for" : "htmlFor",
      "class" : "className",
      maxlength : "maxLength",
      cellspacing : "cellSpacing",
      cellpadding : "cellPadding",
      rowspan : "rowSpan",
      colspan : "colSpan",
      usemap : "useMap",
      frameborder : "frameBorder",
      contenteditable : "contentEditable"
    };
    /** @type {function(*): boolean} */
    var isArray = Array.isArray || function(fn) {
      return fn instanceof Array;
    };
    return zepto.matches = function(element, selector) {
      if (!selector || !element || 1 !== element.nodeType) {
        return false;
      }
      var matchesImpl = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector || element.matchesSelector;
      if (matchesImpl) {
        return matchesImpl.call(element, selector);
      }
      var named;
      var parent = element.parentNode;
      /** @type {boolean} */
      var parenDepth = !parent;
      return parenDepth && (parent = tempParent).appendChild(element), named = ~zepto.qsa(parent, selector).indexOf(element), parenDepth && tempParent.removeChild(element), named;
    }, camelize = function(str) {
      return str.replace(/-+(.)?/g, function(canCreateDiscussions, e) {
        return e ? e.toUpperCase() : "";
      });
    }, uniq = function(array) {
      return filter.call(array, function(i, object) {
        return array.indexOf(i) == object;
      });
    }, zepto.fragment = function(html, name, properties) {
      var border;
      var w;
      var container;
      return regexInvalidEntity.test(html) && (border = $(document.createElement(RegExp.$1))), border || (html.replace && (html = html.replace(REGEXP_ATTR_TAG, "<$1></$2>")), name === undefined && (name = p.test(html) && RegExp.$1), name in containers || (name = "*"), container = containers[name], container.innerHTML = "" + html, border = $.each(slice.call(container.childNodes), function() {
        container.removeChild(this);
      })), isPlainObject(properties) && (w = $(border), $.each(properties, function(key, v) {
        if (methodAttributes.indexOf(key) > -1) {
          w[key](v);
        } else {
          w.attr(key, v);
        }
      })), border;
    }, zepto.Z = function(dom, selector) {
      return new Z(dom, selector);
    }, zepto.isZ = function(object) {
      return object instanceof zepto.Z;
    }, zepto.init = function(selector, context) {
      var dom;
      if (!selector) {
        return zepto.Z();
      }
      if ("string" == typeof selector) {
        if (selector = selector.trim(), "<" == selector[0] && p.test(selector)) {
          dom = zepto.fragment(selector, RegExp.$1, context);
          /** @type {null} */
          selector = null;
        } else {
          if (context !== undefined) {
            return $(context).find(selector);
          }
          dom = zepto.qsa(document, selector);
        }
      } else {
        if (isFunction(selector)) {
          return $(document).ready(selector);
        }
        if (zepto.isZ(selector)) {
          return selector;
        }
        if (isArray(selector)) {
          dom = compact(selector);
        } else {
          if (isObject(selector)) {
            /** @type {!Array} */
            dom = [selector];
            /** @type {null} */
            selector = null;
          } else {
            if (p.test(selector)) {
              dom = zepto.fragment(selector.trim(), RegExp.$1, context);
              /** @type {null} */
              selector = null;
            } else {
              if (context !== undefined) {
                return $(context).find(selector);
              }
              dom = zepto.qsa(document, selector);
            }
          }
        }
      }
      return zepto.Z(dom, selector);
    }, $ = function(value, context) {
      return zepto.init(value, context);
    }, $.extend = function(x) {
      var i;
      /** @type {!Array<?>} */
      var n = slice.call(arguments, 1);
      return "boolean" == typeof x && (i = x, x = n.shift()), n.forEach(function(branchName) {
        create(x, branchName, i);
      }), x;
    }, zepto.qsa = function(element, selector) {
      var found;
      /** @type {boolean} */
      var maybeID = "#" == selector[0];
      /** @type {boolean} */
      var maybeClass = !maybeID && "." == selector[0];
      var nameOnly = maybeID || maybeClass ? selector.slice(1) : selector;
      /** @type {boolean} */
      var isSimple = simpleSelectorRE.test(nameOnly);
      return element.getElementById && isSimple && maybeID ? (found = element.getElementById(nameOnly)) ? [found] : [] : 1 !== element.nodeType && 9 !== element.nodeType && 11 !== element.nodeType ? [] : slice.call(isSimple && !maybeID && element.getElementsByClassName ? maybeClass ? element.getElementsByClassName(nameOnly) : element.getElementsByTagName(selector) : element.querySelectorAll(selector));
    }, $.contains = document.documentElement.contains ? function(key, value) {
      return key !== value && key.contains(value);
    } : function(t, el) {
      for (; el && (el = el.parentNode);) {
        if (el === t) {
          return true;
        }
      }
      return false;
    }, $.type = type, $.isFunction = isFunction, $.isWindow = isWindow, $.isArray = isArray, $.isPlainObject = isPlainObject, $.isEmptyObject = function(object) {
      var name;
      for (name in object) {
        return false;
      }
      return true;
    }, $.isNumeric = function(a) {
      /** @type {number} */
      var q = Number(a);
      /** @type {string} */
      var type = typeof a;
      return null != a && "boolean" != type && ("string" != type || a.length) && !isNaN(q) && isFinite(q) || false;
    }, $.inArray = function(elem, i, array) {
      return emptyArray.indexOf.call(i, elem, array);
    }, $.camelCase = camelize, $.trim = function(value) {
      return null == value ? "" : String.prototype.trim.call(value);
    }, $.uuid = 0, $.support = {}, $.expr = {}, $.noop = function() {
    }, $.map = function(b, filter) {
      var m;
      var g;
      var i;
      /** @type {!Array} */
      var d = [];
      if (likeArray(b)) {
        /** @type {number} */
        g = 0;
        for (; g < b.length; g++) {
          m = filter(b[g], g);
          if (null != m) {
            d.push(m);
          }
        }
      } else {
        for (i in b) {
          m = filter(b[i], i);
          if (null != m) {
            d.push(m);
          }
        }
      }
      return update(d);
    }, $.each = function(obj, fn) {
      var i;
      var key;
      if (likeArray(obj)) {
        /** @type {number} */
        i = 0;
        for (; i < obj.length; i++) {
          if (fn.call(obj[i], i, obj[i]) === false) {
            return obj;
          }
        }
      } else {
        for (key in obj) {
          if (fn.call(obj[key], key, obj[key]) === false) {
            return obj;
          }
        }
      }
      return obj;
    }, $.grep = function(array, callback) {
      return filter.call(array, callback);
    }, window.JSON && ($.parseJSON = JSON.parse), $.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(canCreateDiscussions, p_Interval) {
      class2type["[object " + p_Interval + "]"] = p_Interval.toLowerCase();
    }), $.fn = {
      constructor : zepto.Z,
      length : 0,
      forEach : emptyArray.forEach,
      reduce : emptyArray.reduce,
      push : emptyArray.push,
      sort : emptyArray.sort,
      splice : emptyArray.splice,
      indexOf : emptyArray.indexOf,
      concat : function() {
        var i;
        var value;
        /** @type {!Array} */
        var ret = [];
        /** @type {number} */
        i = 0;
        for (; i < arguments.length; i++) {
          value = arguments[i];
          ret[i] = zepto.isZ(value) ? value.toArray() : value;
        }
        return concat.apply(zepto.isZ(this) ? this.toArray() : this, ret);
      },
      map : function(o) {
        return $($.map(this, function(data, $item) {
          return o.call(data, $item, data);
        }));
      },
      slice : function() {
        return $(slice.apply(this, arguments));
      },
      ready : function(callback) {
        return readyRE.test(document.readyState) && document.body ? callback($) : document.addEventListener("DOMContentLoaded", function() {
          callback($);
        }, false), this;
      },
      get : function(idx) {
        return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length];
      },
      toArray : function() {
        return this.get();
      },
      size : function() {
        return this.length;
      },
      remove : function() {
        return this.each(function() {
          if (null != this.parentNode) {
            this.parentNode.removeChild(this);
          }
        });
      },
      each : function(callback) {
        return emptyArray.every.call(this, function(value, localMediaStream) {
          return callback.call(value, localMediaStream, value) !== false;
        }), this;
      },
      filter : function(selector) {
        return isFunction(selector) ? this.not(this.not(selector)) : $(filter.call(this, function(value) {
          return zepto.matches(value, selector);
        }));
      },
      add : function(selector, context) {
        return $(uniq(this.concat($(selector, context))));
      },
      is : function(selector) {
        return this.length > 0 && zepto.matches(this[0], selector);
      },
      not : function(selector) {
        /** @type {!Array} */
        var n = [];
        if (isFunction(selector) && selector.call !== undefined) {
          this.each(function(i) {
            if (!selector.call(this, i)) {
              n.push(this);
            }
          });
        } else {
          var tableborder = "string" == typeof selector ? this.filter(selector) : likeArray(selector) && isFunction(selector.item) ? slice.call(selector) : $(selector);
          this.forEach(function(t) {
            if (tableborder.indexOf(t) < 0) {
              n.push(t);
            }
          });
        }
        return $(n);
      },
      has : function(selector) {
        return this.filter(function() {
          return isObject(selector) ? $.contains(this, selector) : $(this).find(selector).size();
        });
      },
      eq : function(index) {
        return -1 === index ? this.slice(index) : this.slice(index, +index + 1);
      },
      first : function() {
        var el = this[0];
        return el && !isObject(el) ? el : $(el);
      },
      last : function() {
        var el = this[this.length - 1];
        return el && !isObject(el) ? el : $(el);
      },
      find : function(context) {
        var val;
        var placeMidpointLine = this;
        return val = context ? "object" == typeof context ? $(context).filter(function() {
          var t = this;
          return emptyArray.some.call(placeMidpointLine, function(e) {
            return $.contains(e, t);
          });
        }) : 1 == this.length ? $(zepto.qsa(this[0], context)) : this.map(function() {
          return zepto.qsa(this, context);
        }) : $();
      },
      closest : function(selector, context) {
        /** @type {!Array} */
        var n = [];
        var collection = "object" == typeof selector && $(selector);
        return this.each(function(canCreateDiscussions, node) {
          for (; node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector));) {
            node = node !== context && !isDocument(node) && node.parentNode;
          }
          if (node && n.indexOf(node) < 0) {
            n.push(node);
          }
        }), $(n);
      },
      parents : function(selector) {
        /** @type {!Array} */
        var ancestors = [];
        var e = this;
        for (; e.length > 0;) {
          e = $.map(e, function(node) {
            return (node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0 ? (ancestors.push(node), node) : void 0;
          });
        }
        return filtered(ancestors, selector);
      },
      parent : function(selector) {
        return filtered(uniq(this.pluck("parentNode")), selector);
      },
      children : function(selector) {
        return filtered(this.map(function() {
          return children(this);
        }), selector);
      },
      contents : function() {
        return this.map(function() {
          return this.contentDocument || slice.call(this.childNodes);
        });
      },
      siblings : function(selector) {
        return filtered(this.map(function(canCreateDiscussions, xml) {
          return filter.call(children(xml.parentNode), function(type) {
            return type !== xml;
          });
        }), selector);
      },
      empty : function() {
        return this.each(function() {
          /** @type {string} */
          this.innerHTML = "";
        });
      },
      pluck : function(property) {
        return $.map(this, function(editorPrefs) {
          return editorPrefs[property];
        });
      },
      show : function() {
        return this.each(function() {
          if ("none" == this.style.display) {
            /** @type {string} */
            this.style.display = "";
          }
          if ("none" == getComputedStyle(this, "").getPropertyValue("display")) {
            this.style.display = defaultDisplay(this.nodeName);
          }
        });
      },
      replaceWith : function(newContent) {
        return this.before(newContent).remove();
      },
      wrap : function(f) {
        var func = isFunction(f);
        if (this[0] && !func) {
          var dom = $(f).get(0);
          var clone = dom.parentNode || this.length > 1;
        }
        return this.each(function(args) {
          $(this).wrapAll(func ? f.call(this, args) : clone ? dom.cloneNode(true) : dom);
        });
      },
      wrapAll : function(structure) {
        if (this[0]) {
          $(this[0]).before(structure = $(structure));
          var children;
          for (; (children = structure.children()).length;) {
            structure = children.first();
          }
          $(structure).append(this);
        }
        return this;
      },
      wrapInner : function(html) {
        var e = isFunction(html);
        return this.each(function(link) {
          var self = $(this);
          var contents = self.contents();
          var dom = e ? html.call(this, link) : html;
          if (contents.length) {
            contents.wrapAll(dom);
          } else {
            self.append(dom);
          }
        });
      },
      unwrap : function() {
        return this.parent().each(function() {
          $(this).replaceWith($(this).children());
        }), this;
      },
      clone : function() {
        return this.map(function() {
          return this.cloneNode(true);
        });
      },
      hide : function() {
        return this.css("display", "none");
      },
      toggle : function(setting) {
        return this.each(function() {
          var $bigAutocompleteContent = $(this);
          if (setting === undefined ? "none" == $bigAutocompleteContent.css("display") : setting) {
            $bigAutocompleteContent.show();
          } else {
            $bigAutocompleteContent.hide();
          }
        });
      },
      prev : function(selector) {
        return $(this.pluck("previousElementSibling")).filter(selector || "*");
      },
      next : function(selector) {
        return $(this.pluck("nextElementSibling")).filter(selector || "*");
      },
      html : function(html) {
        return 0 in arguments ? this.each(function(idx) {
          var originHtml = this.innerHTML;
          $(this).empty().append(funcArg(this, html, idx, originHtml));
        }) : 0 in this ? this[0].innerHTML : null;
      },
      text : function(text) {
        return 0 in arguments ? this.each(function(idx) {
          var newText = funcArg(this, text, idx, this.textContent);
          /** @type {string} */
          this.textContent = null == newText ? "" : "" + newText;
        }) : 0 in this ? this.pluck("textContent").join("") : null;
      },
      attr : function(name, value) {
        var shimObject;
        return "string" != typeof name || 1 in arguments ? this.each(function(idx) {
          if (1 === this.nodeType) {
            if (isObject(name)) {
              for (key in name) {
                setAttribute(this, key, name[key]);
              }
            } else {
              setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)));
            }
          }
        }) : 0 in this && 1 == this[0].nodeType && null != (shimObject = this[0].getAttribute(name)) ? shimObject : undefined;
      },
      removeAttr : function(name) {
        return this.each(function() {
          if (1 === this.nodeType) {
            name.split(" ").forEach(function(key) {
              setAttribute(this, key);
            }, this);
          }
        });
      },
      prop : function(name, value) {
        return name = propMap[name] || name, 1 in arguments ? this.each(function(idx) {
          this[name] = funcArg(this, value, idx, this[name]);
        }) : this[0] && this[0][name];
      },
      removeProp : function(name) {
        return name = propMap[name] || name, this.each(function() {
          delete this[name];
        });
      },
      data : function(name, value) {
        var attrName = "data-" + name.replace(dashExpr, "-$1").toLowerCase();
        var v = 1 in arguments ? this.attr(attrName, value) : this.attr(attrName);
        return null !== v ? deserializeValue(v) : undefined;
      },
      val : function(value) {
        return 0 in arguments ? (null == value && (value = ""), this.each(function(idx) {
          this.value = funcArg(this, value, idx, this.value);
        })) : this[0] && (this[0].multiple ? $(this[0]).find("option").filter(function() {
          return this.selected;
        }).pluck("value") : this[0].value);
      },
      offset : function(coordinates) {
        if (coordinates) {
          return this.each(function(index) {
            var $this = $(this);
            var coords = funcArg(this, coordinates, index, $this.offset());
            var parentOffset = $this.offsetParent().offset();
            var style = {
              top : coords.top - parentOffset.top,
              left : coords.left - parentOffset.left
            };
            if ("static" == $this.css("position")) {
              /** @type {string} */
              style.position = "relative";
            }
            $this.css(style);
          });
        }
        if (!this.length) {
          return null;
        }
        if (document.documentElement !== this[0] && !$.contains(document.documentElement, this[0])) {
          return {
            top : 0,
            left : 0
          };
        }
        var obj = this[0].getBoundingClientRect();
        return {
          left : obj.left + window.pageXOffset,
          top : obj.top + window.pageYOffset,
          width : Math.round(obj.width),
          height : Math.round(obj.height)
        };
      },
      css : function(property, value) {
        if (arguments.length < 2) {
          var element = this[0];
          if ("string" == typeof property) {
            if (!element) {
              return;
            }
            return element.style[camelize(property)] || getComputedStyle(element, "").getPropertyValue(property);
          }
          if (isArray(property)) {
            if (!element) {
              return;
            }
            var badgeState = {};
            /** @type {(CSSStyleDeclaration|null)} */
            var computedStyle = getComputedStyle(element, "");
            return $.each(property, function(canCreateDiscussions, property) {
              badgeState[property] = element.style[camelize(property)] || computedStyle.getPropertyValue(property);
            }), badgeState;
          }
        }
        /** @type {string} */
        var css = "";
        if ("string" == type(property)) {
          if (value || 0 === value) {
            /** @type {string} */
            css = dasherize(property) + ":" + maybeAddPx(property, value);
          } else {
            this.each(function() {
              this.style.removeProperty(dasherize(property));
            });
          }
        } else {
          for (key in property) {
            if (property[key] || 0 === property[key]) {
              /** @type {string} */
              css = css + (dasherize(key) + ":" + maybeAddPx(key, property[key]) + ";");
            } else {
              this.each(function() {
                this.style.removeProperty(dasherize(key));
              });
            }
          }
        }
        return this.each(function() {
          this.style.cssText += ";" + css;
        });
      },
      index : function(elem) {
        return elem ? this.indexOf($(elem)[0]) : this.parent().children().indexOf(this[0]);
      },
      hasClass : function(name) {
        return name ? emptyArray.some.call(this, function(el) {
          return this.test(className(el));
        }, classRE(name)) : false;
      },
      addClass : function(name) {
        return name ? this.each(function(idx) {
          if ("className" in this) {
            /** @type {!Array} */
            classList = [];
            var cls = className(this);
            var newName = funcArg(this, name, idx, cls);
            newName.split(/\s+/g).forEach(function(t) {
              if (!$(this).hasClass(t)) {
                classList.push(t);
              }
            }, this);
            if (classList.length) {
              className(this, cls + (cls ? " " : "") + classList.join(" "));
            }
          }
        }) : this;
      },
      removeClass : function(name) {
        return this.each(function(idx) {
          if ("className" in this) {
            if (name === undefined) {
              return className(this, "");
            }
            classList = className(this);
            funcArg(this, name, idx, classList).split(/\s+/g).forEach(function(klass) {
              classList = classList.replace(classRE(klass), " ");
            });
            className(this, classList.trim());
          }
        });
      },
      toggleClass : function(name, when) {
        return name ? this.each(function(idx) {
          var o = $(this);
          var newName = funcArg(this, name, idx, className(this));
          newName.split(/\s+/g).forEach(function(t) {
            if (when === undefined ? !o.hasClass(t) : when) {
              o.addClass(t);
            } else {
              o.removeClass(t);
            }
          });
        }) : this;
      },
      scrollTop : function(value) {
        if (this.length) {
          /** @type {boolean} */
          var hasScrollTop = "scrollTop" in this[0];
          return value === undefined ? hasScrollTop ? this[0].scrollTop : this[0].pageYOffset : this.each(hasScrollTop ? function() {
            /** @type {number} */
            this.scrollTop = value;
          } : function() {
            this.scrollTo(this.scrollX, value);
          });
        }
      },
      scrollLeft : function(value) {
        if (this.length) {
          /** @type {boolean} */
          var hasScrollLeft = "scrollLeft" in this[0];
          return value === undefined ? hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset : this.each(hasScrollLeft ? function() {
            /** @type {number} */
            this.scrollLeft = value;
          } : function() {
            this.scrollTo(value, this.scrollY);
          });
        }
      },
      position : function() {
        if (this.length) {
          var id_value = this[0];
          var offsetParent = this.offsetParent();
          var offset = this.offset();
          var offsetPrimary = invalidParent.test(offsetParent[0].nodeName) ? {
            top : 0,
            left : 0
          } : offsetParent.offset();
          return offset.top -= parseFloat($(id_value).css("margin-top")) || 0, offset.left -= parseFloat($(id_value).css("margin-left")) || 0, offsetPrimary.top += parseFloat($(offsetParent[0]).css("border-top-width")) || 0, offsetPrimary.left += parseFloat($(offsetParent[0]).css("border-left-width")) || 0, {
            top : offset.top - offsetPrimary.top,
            left : offset.left - offsetPrimary.left
          };
        }
      },
      offsetParent : function() {
        return this.map(function() {
          var parent = this.offsetParent || document.body;
          for (; parent && !invalidParent.test(parent.nodeName) && "static" == $(parent).css("position");) {
            parent = parent.offsetParent;
          }
          return parent;
        });
      }
    }, $.fn.detach = $.fn.remove, ["width", "height"].forEach(function(dimension) {
      var dimensionProperty = dimension.replace(/./, function(ctcp) {
        return ctcp[0].toUpperCase();
      });
      /**
       * @param {!Object} value
       * @return {?}
       */
      $.fn[dimension] = function(value) {
        var offset;
        var el = this[0];
        return value === undefined ? isWindow(el) ? el["inner" + dimensionProperty] : isDocument(el) ? el.documentElement["scroll" + dimensionProperty] : (offset = this.offset()) && offset[dimension] : this.each(function(idx) {
          el = $(this);
          el.css(dimension, funcArg(this, value, idx, el[dimension]()));
        });
      };
    }), adjacencyOperators.forEach(function(operator, operatorIndex) {
      /** @type {number} */
      var inside = operatorIndex % 2;
      /**
       * @return {?}
       */
      $.fn[operator] = function() {
        var t;
        var parent;
        var reactors = $.map(arguments, function(n) {
          /** @type {!Array} */
          var selectors = [];
          return t = type(n), "array" == t ? (n.forEach(function(selector) {
            return selector.nodeType !== undefined ? selectors.push(selector) : $.zepto.isZ(selector) ? selectors = selectors.concat(selector.get()) : void(selectors = selectors.concat(zepto.fragment(selector)));
          }), selectors) : "object" == t || null == n ? n : zepto.fragment(n);
        });
        /** @type {boolean} */
        var copyByClone = this.length > 1;
        return reactors.length < 1 ? this : this.each(function(canCreateDiscussions, target) {
          parent = inside ? target : target.parentNode;
          target = 0 == operatorIndex ? target.nextSibling : 1 == operatorIndex ? target.firstChild : 2 == operatorIndex ? target : null;
          var fullComment = $.contains(document.documentElement, parent);
          reactors.forEach(function(e) {
            if (copyByClone) {
              e = e.cloneNode(true);
            } else {
              if (!parent) {
                return $(e).remove();
              }
            }
            parent.insertBefore(e, target);
            if (fullComment) {
              success(e, function(el) {
                if (!(null == el.nodeName || "SCRIPT" !== el.nodeName.toUpperCase() || el.type && "text/javascript" !== el.type || el.src)) {
                  var win = el.ownerDocument ? el.ownerDocument.defaultView : window;
                  win.eval.call(win, el.innerHTML);
                }
              });
            }
          });
        });
      };
      /**
       * @param {!Object} html
       * @return {?}
       */
      $.fn[inside ? operator + "To" : "insert" + (operatorIndex ? "Before" : "After")] = function(html) {
        return $(html)[operator](this), this;
      };
    }), zepto.Z.prototype = Z.prototype = $.fn, zepto.uniq = uniq, zepto.deserializeValue = deserializeValue, $.zepto = zepto, $;
  }();
  return window.Zepto = Zepto, void 0 === window.$ && (window.$ = Zepto), function($) {
    /**
     * @param {!Object} element
     * @return {?}
     */
    function zid(element) {
      return element._zid || (element._zid = _zid++);
    }
    /**
     * @param {!Object} element
     * @param {string} event
     * @param {!Object} fn
     * @param {!Object} selector
     * @return {?}
     */
    function findHandlers(element, event, fn, selector) {
      if (event = parse(event), event.ns) {
        var matcher = matcherFor(event.ns);
      }
      return (handlers[zid(element)] || []).filter(function(handler) {
        return handler && (!event.e || handler.e == event.e) && (!event.ns || matcher.test(handler.ns)) && (!fn || zid(handler.fn) === zid(fn)) && (!selector || handler.sel == selector);
      });
    }
    /**
     * @param {string} event
     * @return {?}
     */
    function parse(event) {
      /** @type {!Array<string>} */
      var parts = ("" + event).split(".");
      return {
        e : parts[0],
        ns : parts.slice(1).sort().join(" ")
      };
    }
    /**
     * @param {string} options
     * @return {?}
     */
    function matcherFor(options) {
      return new RegExp("(?:^| )" + options.replace(" ", " .* ?") + "(?: |$)");
    }
    /**
     * @param {!Object} handler
     * @param {?} captureSetting
     * @return {?}
     */
    function eventCapture(handler, captureSetting) {
      return handler.del && !focusinSupported && handler.e in focus || !!captureSetting;
    }
    /**
     * @param {string} type
     * @return {?}
     */
    function realEvent(type) {
      return hover[type] || focusinSupported && focus[type] || type;
    }
    /**
     * @param {!Window} element
     * @param {!Object} event
     * @param {!Object} fn
     * @param {!Object} body
     * @param {(Object|string)} selector
     * @param {!Object} delegator
     * @param {?} capture
     * @return {undefined}
     */
    function add(element, event, fn, body, selector, delegator, capture) {
      var id = zid(element);
      var set = handlers[id] || (handlers[id] = []);
      event.split(/\s/).forEach(function(populated) {
        if ("ready" == populated) {
          return $(document).ready(fn);
        }
        var handler = parse(populated);
        handler.fn = fn;
        /** @type {(Object|string)} */
        handler.sel = selector;
        if (handler.e in hover) {
          /**
           * @param {!Event} event
           * @return {?}
           */
          fn = function(event) {
            var related = event.relatedTarget;
            return !related || related !== this && !$.contains(this, related) ? handler.fn.apply(this, arguments) : void 0;
          };
        }
        /** @type {!Object} */
        handler.del = delegator;
        var callback = delegator || fn;
        /**
         * @param {!Object} e
         * @return {?}
         */
        handler.proxy = function(e) {
          if (e = compatible(e), !e.isImmediatePropagationStopped()) {
            /** @type {!Object} */
            e.data = body;
            var n = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args));
            return n === false && (e.preventDefault(), e.stopPropagation()), n;
          }
        };
        handler.i = set.length;
        set.push(handler);
        if ("addEventListener" in element) {
          element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
        }
      });
    }
    /**
     * @param {!Object} element
     * @param {string} events
     * @param {!Object} callback
     * @param {!Object} selector
     * @param {?} capture
     * @return {undefined}
     */
    function remove(element, events, callback, selector, capture) {
      var id = zid(element);
      (events || "").split(/\s/).forEach(function(event) {
        findHandlers(element, event, callback, selector).forEach(function(handler) {
          delete handlers[id][handler.i];
          if ("removeEventListener" in element) {
            element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
          }
        });
      });
    }
    /**
     * @param {!Object} event
     * @param {!Object} source
     * @return {?}
     */
    function compatible(event, source) {
      return (source || !event.isDefaultPrevented) && (source || (source = event), $.each(e, function(name, predicate) {
        var sourceMethod = source[name];
        /**
         * @return {?}
         */
        event[name] = function() {
          return this[predicate] = returnTrue, sourceMethod && sourceMethod.apply(source, arguments);
        };
        /** @type {function(): ?} */
        event[predicate] = returnFalse;
      }), event.timeStamp || (event.timeStamp = Date.now()), (source.defaultPrevented !== undefined ? source.defaultPrevented : "returnValue" in source ? source.returnValue === false : source.getPreventDefault && source.getPreventDefault()) && (event.isDefaultPrevented = returnTrue)), event;
    }
    /**
     * @param {!Object} event
     * @return {?}
     */
    function createProxy(event) {
      var key;
      var proxy = {
        originalEvent : event
      };
      for (key in event) {
        if (!(VALID_IDENTIFIER_EXPR.test(key) || event[key] === undefined)) {
          proxy[key] = event[key];
        }
      }
      return compatible(proxy, event);
    }
    var undefined;
    /** @type {number} */
    var _zid = 1;
    /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
    var slice = Array.prototype.slice;
    var isFunction = $.isFunction;
    /**
     * @param {!Object} value
     * @return {?}
     */
    var isString = function(value) {
      return "string" == typeof value;
    };
    var handlers = {};
    var specialEvents = {};
    /** @type {boolean} */
    var focusinSupported = "onfocusin" in window;
    var focus = {
      focus : "focusin",
      blur : "focusout"
    };
    var hover = {
      mouseenter : "mouseover",
      mouseleave : "mouseout"
    };
    /** @type {string} */
    specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = "MouseEvents";
    $.event = {
      add : add,
      remove : remove
    };
    /**
     * @param {!Object} fn
     * @param {!Object} context
     * @return {?}
     */
    $.proxy = function(fn, context) {
      /** @type {(Array<?>|boolean)} */
      var args = 2 in arguments && slice.call(arguments, 2);
      if (isFunction(fn)) {
        /**
         * @return {?}
         */
        var proxyFn = function() {
          return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);
        };
        return proxyFn._zid = zid(fn), proxyFn;
      }
      if (isString(context)) {
        return args ? (args.unshift(fn[context], fn), $.proxy.apply(null, args)) : $.proxy(fn[context], fn);
      }
      throw new TypeError("expected function");
    };
    /**
     * @param {string} type
     * @param {!Function} data
     * @param {!Object} callback
     * @return {?}
     */
    $.fn.bind = function(type, data, callback) {
      return this.on(type, data, callback);
    };
    /**
     * @param {!Object} type
     * @param {!Object} fn
     * @return {?}
     */
    $.fn.unbind = function(type, fn) {
      return this.off(type, fn);
    };
    /**
     * @param {!Object} type
     * @param {string} data
     * @param {!Object} callback
     * @param {!Object} fn
     * @return {?}
     */
    $.fn.one = function(type, data, callback, fn) {
      return this.on(type, data, callback, fn, 1);
    };
    /**
     * @return {?}
     */
    var returnTrue = function() {
      return true;
    };
    /**
     * @return {?}
     */
    var returnFalse = function() {
      return false;
    };
    /** @type {!RegExp} */
    var VALID_IDENTIFIER_EXPR = /^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/;
    var e = {
      preventDefault : "isDefaultPrevented",
      stopImmediatePropagation : "isImmediatePropagationStopped",
      stopPropagation : "isPropagationStopped"
    };
    /**
     * @param {string} callback
     * @param {!Object} type
     * @param {!Object} data
     * @return {?}
     */
    $.fn.delegate = function(callback, type, data) {
      return this.on(type, callback, data);
    };
    /**
     * @param {!Object} callback
     * @param {string} selector
     * @param {!Object} fn
     * @return {?}
     */
    $.fn.undelegate = function(callback, selector, fn) {
      return this.off(selector, callback, fn);
    };
    /**
     * @param {!Object} event
     * @param {!Object} callback
     * @return {?}
     */
    $.fn.live = function(event, callback) {
      return $(document.body).delegate(this.selector, event, callback), this;
    };
    /**
     * @param {string} event
     * @param {!Object} callback
     * @return {?}
     */
    $.fn.die = function(event, callback) {
      return $(document.body).undelegate(this.selector, event, callback), this;
    };
    /**
     * @param {!Object} name
     * @param {string} selector
     * @param {!Object} data
     * @param {!Object} callback
     * @param {number} context
     * @return {?}
     */
    $.fn.on = function(name, selector, data, callback, context) {
      var autoRemove;
      var delegator;
      var method = this;
      return name && !isString(name) ? ($.each(name, function(fetch, fn) {
        method.on(fetch, selector, data, fn, context);
      }), method) : (isString(selector) || isFunction(callback) || callback === false || (callback = data, data = selector, selector = undefined), (callback === undefined || data === false) && (callback = data, data = undefined), callback === false && (callback = returnFalse), method.each(function(canCreateDiscussions, element) {
        if (context) {
          /**
           * @param {!Object} e
           * @return {?}
           */
          autoRemove = function(e) {
            return remove(element, e.type, callback), callback.apply(this, arguments);
          };
        }
        if (selector) {
          /**
           * @param {!Object} e
           * @return {?}
           */
          delegator = function(e) {
            var intfName;
            var match = $(e.target).closest(selector, element).get(0);
            return match && match !== element ? (intfName = $.extend(createProxy(e), {
              currentTarget : match,
              liveFired : element
            }), (autoRemove || callback).apply(match, [intfName].concat(slice.call(arguments, 1)))) : void 0;
          };
        }
        add(element, name, callback, data, selector, delegator || autoRemove);
      }));
    };
    /**
     * @param {!Object} name
     * @param {!Object} callback
     * @param {!Object} handler
     * @return {?}
     */
    $.fn.off = function(name, callback, handler) {
      var method = this;
      return name && !isString(name) ? ($.each(name, function(t, fn) {
        method.off(t, callback, fn);
      }), method) : (isString(callback) || isFunction(handler) || handler === false || (handler = callback, callback = undefined), handler === false && (handler = returnFalse), method.each(function() {
        remove(this, name, handler, callback);
      }));
    };
    /**
     * @param {?} event
     * @param {!Array} args
     * @return {?}
     */
    $.fn.trigger = function(event, args) {
      return event = isString(event) || $.isPlainObject(event) ? $.Event(event) : compatible(event), event._args = args, this.each(function() {
        if (event.type in focus && "function" == typeof this[event.type]) {
          this[event.type]();
        } else {
          if ("dispatchEvent" in this) {
            this.dispatchEvent(event);
          } else {
            $(this).triggerHandler(event, args);
          }
        }
      });
    };
    /**
     * @param {?} event
     * @param {!Array} args
     * @return {?}
     */
    $.fn.triggerHandler = function(event, args) {
      var e;
      var eFixed;
      return this.each(function(canCreateDiscussions, element) {
        e = createProxy(isString(event) ? $.Event(event) : event);
        /** @type {!Array} */
        e._args = args;
        /** @type {!Object} */
        e.target = element;
        $.each(findHandlers(element, event.type || event), function(canCreateDiscussions, handler) {
          return eFixed = handler.proxy(e), e.isImmediatePropagationStopped() ? false : void 0;
        });
      }), eFixed;
    };
    "focusin focusout focus blur load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select keydown keypress keyup error".split(" ").forEach(function(event) {
      /**
       * @param {!Function} callback
       * @return {?}
       */
      $.fn[event] = function(callback) {
        return 0 in arguments ? this.bind(event, callback) : this.trigger(event);
      };
    });
    /**
     * @param {?} type
     * @param {?} props
     * @return {?}
     */
    $.Event = function(type, props) {
      if (!isString(type)) {
        props = type;
        type = props.type;
      }
      /** @type {(Event|null)} */
      var event = document.createEvent(specialEvents[type] || "Events");
      /** @type {boolean} */
      var bubbles = true;
      if (props) {
        var name;
        for (name in props) {
          if ("bubbles" == name) {
            /** @type {boolean} */
            bubbles = !!props[name];
          } else {
            event[name] = props[name];
          }
        }
      }
      return event.initEvent(type, bubbles, true), compatible(event);
    };
  }(Zepto), function($) {
    /**
     * @param {?} context
     * @param {string} eventName
     * @param {!Array} data
     * @return {?}
     */
    function triggerAndReturn(context, eventName, data) {
      var event = $.Event(eventName);
      return $(context).trigger(event, data), !event.isDefaultPrevented();
    }
    /**
     * @param {!Object} settings
     * @param {!Object} context
     * @param {string} eventName
     * @param {!Array} data
     * @return {?}
     */
    function triggerGlobal(settings, context, eventName, data) {
      return settings.global ? triggerAndReturn(context || document, eventName, data) : void 0;
    }
    /**
     * @param {!Object} settings
     * @return {undefined}
     */
    function ajaxStart(settings) {
      if (settings.global && 0 === $.active++) {
        triggerGlobal(settings, null, "ajaxStart");
      }
    }
    /**
     * @param {!Object} settings
     * @return {undefined}
     */
    function ajaxStop(settings) {
      if (settings.global && !--$.active) {
        triggerGlobal(settings, null, "ajaxStop");
      }
    }
    /**
     * @param {?} xhr
     * @param {!Object} settings
     * @return {?}
     */
    function ajaxBeforeSend(xhr, settings) {
      var context = settings.context;
      return settings.beforeSend.call(context, xhr, settings) === false || triggerGlobal(settings, context, "ajaxBeforeSend", [xhr, settings]) === false ? false : void triggerGlobal(settings, context, "ajaxSend", [xhr, settings]);
    }
    /**
     * @param {!Object} data
     * @param {?} xhr
     * @param {!Object} settings
     * @param {!Object} deferred
     * @return {undefined}
     */
    function ajaxSuccess(data, xhr, settings, deferred) {
      var context = settings.context;
      /** @type {string} */
      var status = "success";
      settings.success.call(context, data, status, xhr);
      if (deferred) {
        deferred.resolveWith(context, [data, status, xhr]);
      }
      triggerGlobal(settings, context, "ajaxSuccess", [xhr, settings, data]);
      ajaxComplete(status, xhr, settings);
    }
    /**
     * @param {string} error
     * @param {string} type
     * @param {?} xhr
     * @param {!Object} settings
     * @param {!Object} deferred
     * @return {undefined}
     */
    function ajaxError(error, type, xhr, settings, deferred) {
      var context = settings.context;
      settings.error.call(context, xhr, type, error);
      if (deferred) {
        deferred.rejectWith(context, [xhr, type, error]);
      }
      triggerGlobal(settings, context, "ajaxError", [xhr, settings, error || type]);
      ajaxComplete(type, xhr, settings);
    }
    /**
     * @param {string} status
     * @param {?} xhr
     * @param {!Object} settings
     * @return {undefined}
     */
    function ajaxComplete(status, xhr, settings) {
      var context = settings.context;
      settings.complete.call(context, xhr, status);
      triggerGlobal(settings, context, "ajaxComplete", [xhr, settings]);
      ajaxStop(settings);
    }
    /**
     * @param {!Object} data
     * @param {?} type
     * @param {!Object} settings
     * @return {?}
     */
    function ajaxDataFilter(data, type, settings) {
      if (settings.dataFilter == empty) {
        return data;
      }
      var context = settings.context;
      return settings.dataFilter.call(context, data, type);
    }
    /**
     * @return {undefined}
     */
    function empty() {
    }
    /**
     * @param {string} mime
     * @return {?}
     */
    function mimeToDataType(mime) {
      return mime && (mime = mime.split(";", 2)[0]), mime && (mime == htmlType ? "html" : mime == jsonType ? "json" : xmlTypeRE.test(mime) ? "script" : scriptTypeRE.test(mime) && "xml") || "text";
    }
    /**
     * @param {string} url
     * @param {string} query
     * @return {?}
     */
    function appendQuery(url, query) {
      return "" == query ? url : (url + "&" + query).replace(/[&?]{1,2}/, "?");
    }
    /**
     * @param {!Object} options
     * @return {undefined}
     */
    function serializeData(options) {
      if (options.processData && options.data && "string" != $.type(options.data)) {
        options.data = $.param(options.data, options.traditional);
      }
      if (!(!options.data || options.type && "GET" != options.type.toUpperCase() && "jsonp" != options.dataType)) {
        options.url = appendQuery(options.url, options.data);
        options.data = void 0;
      }
    }
    /**
     * @param {string} b
     * @param {string} n
     * @param {string} e
     * @param {string} d
     * @return {?}
     */
    function C(b, n, e, d) {
      return $.isFunction(n) && (d = e, e = n, n = void 0), $.isFunction(e) || (d = e, e = void 0), {
        url : b,
        data : n,
        success : e,
        dataType : d
      };
    }
    /**
     * @param {!Array} user
     * @param {!Object} fn
     * @param {string} option
     * @param {string} val
     * @return {undefined}
     */
    function add(user, fn, option, val) {
      var undefined;
      var id = $.isArray(fn);
      var error = $.isPlainObject(fn);
      $.each(fn, function(data, obj) {
        undefined = $.type(obj);
        if (val) {
          data = option ? val : val + "[" + (error || "object" == undefined || "array" == undefined ? data : "") + "]";
        }
        if (!val && id) {
          user.add(obj.name, obj.value);
        } else {
          if ("array" == undefined || !option && "object" == undefined) {
            add(user, obj, option, data);
          } else {
            user.add(data, obj);
          }
        }
      });
    }
    var key;
    var name;
    /** @type {number} */
    var jsonpID = +new Date;
    var document = window.document;
    /** @type {!RegExp} */
    var regPlaceholder = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
    /** @type {!RegExp} */
    var xmlTypeRE = /^(?:text|application)\/javascript/i;
    /** @type {!RegExp} */
    var scriptTypeRE = /^(?:text|application)\/xml/i;
    /** @type {string} */
    var jsonType = "application/json";
    /** @type {string} */
    var htmlType = "text/html";
    /** @type {!RegExp} */
    var rootRegExp = /^\s*$/;
    var originAnchor = document.createElement("a");
    originAnchor.href = window.location.href;
    /** @type {number} */
    $.active = 0;
    /**
     * @param {!Object} options
     * @param {!Object} deferred
     * @return {?}
     */
    $.ajaxJSONP = function(options, deferred) {
      if (!("type" in options)) {
        return $.ajax(options);
      }
      var responseData;
      var _takingTooLongTimeout;
      var _callbackName = options.jsonpCallback;
      var callbackName = ($.isFunction(_callbackName) ? _callbackName() : _callbackName) || "Zepto" + jsonpID++;
      var script = document.createElement("script");
      var originalCallback = window[callbackName];
      /**
       * @param {string} errorType
       * @return {undefined}
       */
      var abort = function(errorType) {
        $(script).triggerHandler("error", errorType || "abort");
      };
      var xhr = {
        abort : abort
      };
      return deferred && deferred.promise(xhr), $(script).on("load error", function(context, errorType) {
        clearTimeout(_takingTooLongTimeout);
        $(script).off().remove();
        if ("error" != context.type && responseData) {
          ajaxSuccess(responseData[0], xhr, options, deferred);
        } else {
          ajaxError(null, errorType || "error", xhr, options, deferred);
        }
        window[callbackName] = originalCallback;
        if (responseData && $.isFunction(originalCallback)) {
          originalCallback(responseData[0]);
        }
        originalCallback = responseData = void 0;
      }), ajaxBeforeSend(xhr, options) === false ? (abort("abort"), xhr) : (window[callbackName] = function() {
        /** @type {!Arguments} */
        responseData = arguments;
      }, script.src = options.url.replace(/\?(.+)=\?/, "?$1=" + callbackName), document.head.appendChild(script), options.timeout > 0 && (_takingTooLongTimeout = setTimeout(function() {
        abort("timeout");
      }, options.timeout)), xhr);
    };
    $.ajaxSettings = {
      type : "GET",
      beforeSend : empty,
      success : empty,
      error : empty,
      complete : empty,
      context : null,
      global : true,
      xhr : function() {
        return new window.XMLHttpRequest;
      },
      accepts : {
        script : "text/javascript, application/javascript, application/x-javascript",
        json : jsonType,
        xml : "application/xml, text/xml",
        html : htmlType,
        text : "text/plain"
      },
      crossDomain : false,
      timeout : 0,
      processData : true,
      cache : true,
      dataFilter : empty
    };
    /**
     * @param {!Object} options
     * @return {?}
     */
    $.ajax = function(options) {
      var urlAnchor;
      var hashIndex;
      var settings = $.extend({}, options || {});
      var deferred = $.Deferred && $.Deferred();
      for (key in $.ajaxSettings) {
        if (void 0 === settings[key]) {
          settings[key] = $.ajaxSettings[key];
        }
      }
      ajaxStart(settings);
      if (!settings.crossDomain) {
        urlAnchor = document.createElement("a");
        urlAnchor.href = settings.url;
        urlAnchor.href = urlAnchor.href;
        /** @type {boolean} */
        settings.crossDomain = originAnchor.protocol + "//" + originAnchor.host != urlAnchor.protocol + "//" + urlAnchor.host;
      }
      if (!settings.url) {
        settings.url = window.location.toString();
      }
      if ((hashIndex = settings.url.indexOf("#")) > -1) {
        settings.url = settings.url.slice(0, hashIndex);
      }
      serializeData(settings);
      var dataType = settings.dataType;
      /** @type {boolean} */
      var p = /\?.+=\?/.test(settings.url);
      if (p && (dataType = "jsonp"), settings.cache !== false && (options && options.cache === true || "script" != dataType && "jsonp" != dataType) || (settings.url = appendQuery(settings.url, "_=" + Date.now())), "jsonp" == dataType) {
        return p || (settings.url = appendQuery(settings.url, settings.jsonp ? settings.jsonp + "=?" : settings.jsonp === false ? "" : "callback=?")), $.ajaxJSONP(settings, deferred);
      }
      var _takingTooLongTimeout;
      var mime = settings.accepts[dataType];
      var headers = {};
      /**
       * @param {string} name
       * @param {string} value
       * @return {undefined}
       */
      var setHeader = function(name, value) {
        /** @type {!Array} */
        headers[name.toLowerCase()] = [name, value];
      };
      var C = /^([\w-]+:)\/\//.test(settings.url) ? RegExp.$1 : window.location.protocol;
      var xhr = settings.xhr();
      var nativeSetHeader = xhr.setRequestHeader;
      if (deferred && deferred.promise(xhr), settings.crossDomain || setHeader("X-Requested-With", "XMLHttpRequest"), setHeader("Accept", mime || "*/*"), (mime = settings.mimeType || mime) && (mime.indexOf(",") > -1 && (mime = mime.split(",", 2)[0]), xhr.overrideMimeType && xhr.overrideMimeType(mime)), (settings.contentType || settings.contentType !== false && settings.data && "GET" != settings.type.toUpperCase()) && setHeader("Content-Type", settings.contentType || "application/x-www-form-urlencoded"), 
      settings.headers) {
        for (name in settings.headers) {
          setHeader(name, settings.headers[name]);
        }
      }
      if (xhr.setRequestHeader = setHeader, xhr.onreadystatechange = function() {
        if (4 == xhr.readyState) {
          /** @type {function(): undefined} */
          xhr.onreadystatechange = empty;
          clearTimeout(_takingTooLongTimeout);
          var result;
          /** @type {boolean} */
          var error = false;
          if (xhr.status >= 200 && xhr.status < 300 || 304 == xhr.status || 0 == xhr.status && "file:" == C) {
            if (dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader("content-type")), "arraybuffer" == xhr.responseType || "blob" == xhr.responseType) {
              result = xhr.response;
            } else {
              result = xhr.responseText;
              try {
                result = ajaxDataFilter(result, dataType, settings);
                if ("script" == dataType) {
                  (1, eval)(result);
                } else {
                  if ("xml" == dataType) {
                    result = xhr.responseXML;
                  } else {
                    if ("json" == dataType) {
                      result = rootRegExp.test(result) ? null : $.parseJSON(result);
                    }
                  }
                }
              } catch (a3) {
                error = a3;
              }
              if (error) {
                return ajaxError(error, "parsererror", xhr, settings, deferred);
              }
            }
            ajaxSuccess(result, xhr, settings, deferred);
          } else {
            ajaxError(xhr.statusText || null, xhr.status ? "error" : "abort", xhr, settings, deferred);
          }
        }
      }, ajaxBeforeSend(xhr, settings) === false) {
        return xhr.abort(), ajaxError(null, "abort", xhr, settings, deferred), xhr;
      }
      var async = "async" in settings ? settings.async : true;
      if (xhr.open(settings.type, settings.url, async, settings.username, settings.password), settings.xhrFields) {
        for (name in settings.xhrFields) {
          xhr[name] = settings.xhrFields[name];
        }
      }
      for (name in headers) {
        nativeSetHeader.apply(xhr, headers[name]);
      }
      return settings.timeout > 0 && (_takingTooLongTimeout = setTimeout(function() {
        /** @type {function(): undefined} */
        xhr.onreadystatechange = empty;
        xhr.abort();
        ajaxError(null, "timeout", xhr, settings, deferred);
      }, settings.timeout)), xhr.send(settings.data ? settings.data : null), xhr;
    };
    /**
     * @return {?}
     */
    $.get = function() {
      return $.ajax(C.apply(null, arguments));
    };
    /**
     * @return {?}
     */
    $.post = function() {
      var options = C.apply(null, arguments);
      return options.type = "POST", $.ajax(options);
    };
    /**
     * @return {?}
     */
    $.getJSON = function() {
      var options = C.apply(null, arguments);
      return options.dataType = "json", $.ajax(options);
    };
    /**
     * @param {string} m
     * @param {string} t
     * @param {string} e
     * @return {?}
     */
    $.fn.load = function(m, t, e) {
      if (!this.length) {
        return this;
      }
      var selector;
      var self = this;
      var parts = m.split(/\s/);
      var r = C(m, t, e);
      /** @type {function(string): undefined} */
      var callback = r.success;
      return parts.length > 1 && (r.url = parts[0], selector = parts[1]), r.success = function(response) {
        self.html(selector ? $("<div>").html(response.replace(regPlaceholder, "")).find(selector) : response);
        if (callback) {
          callback.apply(self, arguments);
        }
      }, $.ajax(r), this;
    };
    /** @type {function(string): string} */
    var enc = encodeURIComponent;
    /**
     * @param {!Object} name
     * @param {string} n
     * @return {?}
     */
    $.param = function(name, n) {
      /** @type {!Array} */
      var r = [];
      return r.add = function(val, key) {
        if ($.isFunction(key)) {
          key = key();
        }
        if (null == key) {
          /** @type {string} */
          key = "";
        }
        this.push(enc(val) + "=" + enc(key));
      }, add(r, name, n), r.join("&").replace(/%20/g, "+");
    };
  }(Zepto), function($) {
    /**
     * @return {?}
     */
    $.fn.serializeArray = function() {
      var item_name;
      var type;
      /** @type {!Array} */
      var tosend_formatted = [];
      /**
       * @param {(Array|string)} value
       * @return {?}
       */
      var add = function(value) {
        return value.forEach ? value.forEach(add) : void tosend_formatted.push({
          name : item_name,
          value : value
        });
      };
      return this[0] && $.each(this[0].elements, function(canCreateDiscussions, item) {
        type = item.type;
        item_name = item.name;
        if (item_name && "fieldset" != item.nodeName.toLowerCase() && !item.disabled && "submit" != type && "reset" != type && "button" != type && "file" != type && ("radio" != type && "checkbox" != type || item.checked)) {
          add($(item).val());
        }
      }), tosend_formatted;
    };
    /**
     * @return {?}
     */
    $.fn.serialize = function() {
      /** @type {!Array} */
      var drilldownLevelLabels = [];
      return this.serializeArray().forEach(function(elm) {
        drilldownLevelLabels.push(encodeURIComponent(elm.name) + "=" + encodeURIComponent(elm.value));
      }), drilldownLevelLabels.join("&");
    };
    /**
     * @param {!Function} f
     * @return {?}
     */
    $.fn.submit = function(f) {
      if (0 in arguments) {
        this.bind("submit", f);
      } else {
        if (this.length) {
          var event = $.Event("submit");
          this.eq(0).trigger(event);
          if (!event.isDefaultPrevented()) {
            this.get(0).submit();
          }
        }
      }
      return this;
    };
  }(Zepto), function() {
    try {
      getComputedStyle(void 0);
    } catch (e) {
      /** @type {function((Element|null), (null|string)=): (CSSStyleDeclaration|null)} */
      var nativeGetComputedStyle = getComputedStyle;
      /**
       * @param {?} element
       * @param {?} pseudoElement
       * @return {?}
       */
      window.getComputedStyle = function(element, pseudoElement) {
        try {
          return nativeGetComputedStyle(element, pseudoElement);
        } catch (r) {
          return null;
        }
      };
    }
  }(), Zepto;
});
