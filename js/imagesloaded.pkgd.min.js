/**
 * @license
 imagesLoaded PACKAGED v4.1.1
 JavaScript is all like "You images are done yet or what?"
 MIT License
*/
'use strict';
!function(global, factory) {
  if ("function" == typeof define && define.amd) {
    define("ev-emitter/ev-emitter", factory);
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = factory();
    } else {
      global.EvEmitter = factory();
    }
  }
}("undefined" != typeof window ? window : this, function() {
  /**
   * @return {undefined}
   */
  function StopAutoplay() {
  }
  var proto = StopAutoplay.prototype;
  return proto.on = function(name, type) {
    if (name && type) {
      var events = this._events = this._events || {};
      var n = events[name] = events[name] || [];
      return -1 == n.indexOf(type) && n.push(type), this;
    }
  }, proto.once = function(eventName, event) {
    if (eventName && event) {
      this.on(eventName, event);
      var onceEvents = this._onceEvents = this._onceEvents || {};
      var animationConfigs = onceEvents[eventName] = onceEvents[eventName] || {};
      return animationConfigs[event] = true, this;
    }
  }, proto.off = function(name, type) {
    var listeners = this._events && this._events[name];
    if (listeners && listeners.length) {
      var p = listeners.indexOf(type);
      return -1 != p && listeners.splice(p, 1), this;
    }
  }, proto.emitEvent = function(eventName, data) {
    var files = this._events && this._events[eventName];
    if (files && files.length) {
      /** @type {number} */
      var name = 0;
      var o = files[name];
      data = data || [];
      var _strings = this._onceEvents && this._onceEvents[eventName];
      for (; o;) {
        var rev = _strings && _strings[o];
        if (rev) {
          this.off(eventName, o);
          delete _strings[o];
        }
        o.apply(this, data);
        /** @type {number} */
        name = name + (rev ? 0 : 1);
        o = files[name];
      }
      return this;
    }
  }, StopAutoplay;
}), function(window, factory) {
  if ("function" == typeof define && define.amd) {
    define(["ev-emitter/ev-emitter"], function(bleat) {
      return factory(window, bleat);
    });
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = factory(window, require("ev-emitter"));
    } else {
      window.imagesLoaded = factory(window, window.EvEmitter);
    }
  }
}(window, function(window, WebSocketDataModel) {
  /**
   * @param {!Object} source
   * @param {!Object} target
   * @return {?}
   */
  function extend(source, target) {
    var key;
    for (key in target) {
      source[key] = target[key];
    }
    return source;
  }
  /**
   * @param {!Array} arr
   * @return {?}
   */
  function makeArray(arr) {
    /** @type {!Array} */
    var ret = [];
    if (Array.isArray(arr)) {
      /** @type {!Array} */
      ret = arr;
    } else {
      if ("number" == typeof arr.length) {
        /** @type {number} */
        var i = 0;
        for (; i < arr.length; i++) {
          ret.push(arr[i]);
        }
      } else {
        ret.push(arr);
      }
    }
    return ret;
  }
  /**
   * @param {(Array|string)} elem
   * @param {!Object} options
   * @param {!Function} callback
   * @return {?}
   */
  function ImagesLoaded(elem, options, callback) {
    return this instanceof ImagesLoaded ? ("string" == typeof elem && (elem = document.querySelectorAll(elem)), this.elements = makeArray(elem), this.options = extend({}, this.options), "function" == typeof options ? callback = options : extend(this.options, options), callback && this.on("always", callback), this.getImages(), $ && (this.jqDeferred = new $.Deferred), void setTimeout(function() {
      this.check();
    }.bind(this))) : new ImagesLoaded(elem, options, callback);
  }
  /**
   * @param {string} img
   * @return {undefined}
   */
  function LoadingImage(img) {
    /** @type {string} */
    this.img = img;
  }
  /**
   * @param {string} url
   * @param {!Element} description
   * @return {undefined}
   */
  function Background(url, description) {
    /** @type {string} */
    this.url = url;
    /** @type {!Element} */
    this.element = description;
    /** @type {!Image} */
    this.img = new Image;
  }
  var $ = window.jQuery;
  var console = window.console;
  /** @type {!Object} */
  ImagesLoaded.prototype = Object.create(WebSocketDataModel.prototype);
  ImagesLoaded.prototype.options = {};
  /**
   * @return {undefined}
   */
  ImagesLoaded.prototype.getImages = function() {
    /** @type {!Array} */
    this.images = [];
    this.elements.forEach(this.addElementImages, this);
  };
  /**
   * @param {!Node} elem
   * @return {undefined}
   */
  ImagesLoaded.prototype.addElementImages = function(elem) {
    if ("IMG" == elem.nodeName) {
      this.addImage(elem);
    }
    if (this.options.background === true) {
      this.addElementBackgroundImages(elem);
    }
    var k = elem.nodeType;
    if (k && offs[k]) {
      var elems = elem.querySelectorAll("img");
      /** @type {number} */
      var i = 0;
      for (; i < elems.length; i++) {
        var elem = elems[i];
        this.addImage(elem);
      }
      if ("string" == typeof this.options.background) {
        var hoverElems = elem.querySelectorAll(this.options.background);
        /** @type {number} */
        i = 0;
        for (; i < hoverElems.length; i++) {
          var elem = hoverElems[i];
          this.addElementBackgroundImages(elem);
        }
      }
    }
  };
  var offs = {
    1 : true,
    9 : true,
    11 : true
  };
  return ImagesLoaded.prototype.addElementBackgroundImages = function(elem) {
    /** @type {(CSSStyleDeclaration|null)} */
    var style = getComputedStyle(elem);
    if (style) {
      /** @type {!RegExp} */
      var reURL = /url\((['"])?(.*?)\1\)/gi;
      /** @type {(Array<string>|null)} */
      var contentUrls = reURL.exec(style.backgroundImage);
      for (; null !== contentUrls;) {
        /** @type {string} */
        var url = contentUrls && contentUrls[2];
        if (url) {
          this.addBackground(url, elem);
        }
        /** @type {(Array<string>|null)} */
        contentUrls = reURL.exec(style.backgroundImage);
      }
    }
  }, ImagesLoaded.prototype.addImage = function(img) {
    var loadingImage = new LoadingImage(img);
    this.images.push(loadingImage);
  }, ImagesLoaded.prototype.addBackground = function(url, elem) {
    var background = new Background(url, elem);
    this.images.push(background);
  }, ImagesLoaded.prototype.check = function() {
    /**
     * @param {!Object} that
     * @param {?} size
     * @param {string} options
     * @return {undefined}
     */
    function write(that, size, options) {
      setTimeout(function() {
        e.progress(that, size, options);
      });
    }
    var e = this;
    return this.progressedCount = 0, this.hasAnyBroken = false, this.images.length ? void this.images.forEach(function(req) {
      req.once("progress", write);
      req.check();
    }) : void this.complete();
  }, ImagesLoaded.prototype.progress = function(image, elem, value) {
    this.progressedCount++;
    this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
    this.emitEvent("progress", [this, image, elem]);
    if (this.jqDeferred && this.jqDeferred.notify) {
      this.jqDeferred.notify(this, image);
    }
    if (this.progressedCount == this.images.length) {
      this.complete();
    }
    if (this.options.debug && console) {
      console.log("progress: " + value, image, elem);
    }
  }, ImagesLoaded.prototype.complete = function() {
    /** @type {string} */
    var eventName = this.hasAnyBroken ? "fail" : "done";
    if (this.isComplete = true, this.emitEvent(eventName, [this]), this.emitEvent("always", [this]), this.jqDeferred) {
      /** @type {string} */
      var jqMethod = this.hasAnyBroken ? "reject" : "resolve";
      this.jqDeferred[jqMethod](this);
    }
  }, LoadingImage.prototype = Object.create(WebSocketDataModel.prototype), LoadingImage.prototype.check = function() {
    var isComplete = this.getIsImageComplete();
    return isComplete ? void this.confirm(0 !== this.img.naturalWidth, "naturalWidth") : (this.proxyImage = new Image, this.proxyImage.addEventListener("load", this), this.proxyImage.addEventListener("error", this), this.img.addEventListener("load", this), this.img.addEventListener("error", this), void(this.proxyImage.src = this.img.src));
  }, LoadingImage.prototype.getIsImageComplete = function() {
    return this.img.complete && void 0 !== this.img.naturalWidth;
  }, LoadingImage.prototype.confirm = function(isLoaded, message) {
    /** @type {boolean} */
    this.isLoaded = isLoaded;
    this.emitEvent("progress", [this, this.img, message]);
  }, LoadingImage.prototype.handleEvent = function(event) {
    /** @type {string} */
    var method = "on" + event.type;
    if (this[method]) {
      this[method](event);
    }
  }, LoadingImage.prototype.onload = function() {
    this.confirm(true, "onload");
    this.unbindEvents();
  }, LoadingImage.prototype.onerror = function() {
    this.confirm(false, "onerror");
    this.unbindEvents();
  }, LoadingImage.prototype.unbindEvents = function() {
    this.proxyImage.removeEventListener("load", this);
    this.proxyImage.removeEventListener("error", this);
    this.img.removeEventListener("load", this);
    this.img.removeEventListener("error", this);
  }, Background.prototype = Object.create(LoadingImage.prototype), Background.prototype.check = function() {
    this.img.addEventListener("load", this);
    this.img.addEventListener("error", this);
    this.img.src = this.url;
    var isComplete = this.getIsImageComplete();
    if (isComplete) {
      this.confirm(0 !== this.img.naturalWidth, "naturalWidth");
      this.unbindEvents();
    }
  }, Background.prototype.unbindEvents = function() {
    this.img.removeEventListener("load", this);
    this.img.removeEventListener("error", this);
  }, Background.prototype.confirm = function(isLoaded, message) {
    /** @type {boolean} */
    this.isLoaded = isLoaded;
    this.emitEvent("progress", [this, this.element, message]);
  }, ImagesLoaded.makeJQueryPlugin = function(jQuery) {
    jQuery = jQuery || window.jQuery;
    if (jQuery) {
      /** @type {string} */
      $ = jQuery;
      /**
       * @param {(!Function|RegExp|string)} options
       * @param {(!Function|RegExp|string)} callback
       * @return {?}
       */
      $.fn.imagesLoaded = function(options, callback) {
        var instance = new ImagesLoaded(this, options, callback);
        return instance.jqDeferred.promise($(this));
      };
    }
  }, ImagesLoaded.makeJQueryPlugin(), ImagesLoaded;
});
